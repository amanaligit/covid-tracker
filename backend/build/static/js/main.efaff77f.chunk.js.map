{"version":3,"sources":["components/login.js","components/Register.js","components/UpdateForm.js","components/Logout.js","components/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["Login","setSignedIn","signedIn","useState","error","setError","login","data","a","axios","post","process","then","response","localStorage","setItem","token","catch","message","schema","yup","email","required","password","useForm","resolver","yupResolver","mode","register","handleSubmit","errors","formState","to","className","onSubmit","htmlFor","type","id","aria-describedby","Register","success","setSuccess","fullname","min","matches","phone","excludeEmptyString","passwordConfirmation","oneOf","defaultValues","reset","dirtyFields","registerUser","UpdateForm","getItem","numEntries","setnumEntries","stateData","setStateData","entries","of","shape","state_id","typeError","newcases","positive","useEffect","get","headers","sendData","slice","setTimeout","role","data-dismiss","aria-label","aria-hidden","Array","keys","map","i","name","value","val","index","placeholder","onClick","n","style","fontSize","Logout","removeItem","Navbar","href","data-toggle","data-target","aria-controls","aria-expanded","exact","activeClassName","App","props","height","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.efaff77f.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport { FaSignInAlt } from \"react-icons/fa\";\r\n\r\n// using react-hook-form library for form submission and validation.\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\n// using yup resolver to validate our form\r\nimport * as yup from \"yup\";\r\n\r\nfunction Login({ setSignedIn, signedIn }) {\r\n  // set error state from useState hook to display the error\r\n  const [error, setError] = useState(null);\r\n\r\n  // login the user by api call to the auth/login route\r\n  const login = async (data) => {\r\n    axios\r\n      .post(`${process.env.REACT_APP_API_URL}auth/login`, data)\r\n      .then((response) => {\r\n        // store the token in browser storage for future use to access protected routes and change the signed in state\r\n        localStorage.setItem(\"jwtToken\", response?.data?.token);\r\n        setSignedIn(true);\r\n      })\r\n      .catch((error) => {\r\n        setError(error.response?.data?.message);\r\n      });\r\n  };\r\n\r\n  // initialeze the validation schema to verify our form. This just checks that the fields are not empty before sending the form data\r\n  const schema = yup.object({\r\n    email: yup.string().email(\"invalid email\").required(\"email is required\"),\r\n    password: yup.string().required(\"password is required\"),\r\n  });\r\n\r\n  // Using react hook form for easy form submission and validation, errors are displayed live as the state updates on change of any field\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n    mode: \"onChange\",\r\n  });\r\n\r\n  // if user is already signed in, redirect them to the protected route.\r\n  if (signedIn) {\r\n    return <Redirect to=\"/update-form\" />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"global-container\">\r\n      <div className=\"card login-form\">\r\n        <div className=\"card-body\">\r\n          <h3 className=\"card-title text-center \">Log in to Covid Tracker</h3>\r\n          <div className=\"card-text\">\r\n            <form onSubmit={handleSubmit(login)}>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"exampleInputEmail1\">Email</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control form-control-sm\"\r\n                  id=\"exampleInputEmail1\"\r\n                  aria-describedby=\"emailHelp\"\r\n                  {...register(\"email\")}\r\n                />\r\n                {errors?.email && (\r\n                  <div className=\"alert alert-danger mt-2\">\r\n                    <span>{errors.email.message}</span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"exampleInputPassword1\">Password</label>\r\n                <input\r\n                  type=\"password\"\r\n                  className=\"form-control form-control-sm\"\r\n                  id=\"exampleInputPassword1\"\r\n                  {...register(\"password\")}\r\n                />\r\n                {errors?.password && (\r\n                  <div className=\"alert alert-danger mt-2\">\r\n                    <span>{errors.password.message}</span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              {error && (\r\n                <div className=\"alert alert-danger mt-2 text-center\">\r\n                  <span>{error}</span>\r\n                </div>\r\n              )}\r\n              <button type=\"submit\" className=\"btn btn-primary btn-block\">\r\n                <FaSignInAlt /> Sign in\r\n              </button>\r\n              <div className=\"sign-up\">\r\n                Don't have an account? <Link to=\"register\">Create One</Link>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FaSignInAlt } from \"react-icons/fa\";\r\n\r\n// using react-hook-form library for form submission and validation.\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\n// using yup resolver to validate our form\r\nimport * as yup from \"yup\";\r\n\r\nfunction Register() {\r\n  // useState hook is used to create states for error and success of registeration.\r\n  const [error, setError] = useState(null);\r\n  const [success, setSuccess] = useState(false);\r\n\r\n  // Our validation schema for form validation, strings in brackets are the error that are displayed if the requirement is not completed\r\n  const schema = yup.object({\r\n    fullname: yup.string().required(\"Name is required\"),\r\n    // automated email string verification:\r\n    email: yup\r\n      .string(\"invalid email\")\r\n      .email(\"invalid email\")\r\n      .required(\"email is required\"),\r\n    // password matched using custom regular expression\r\n    password: yup\r\n      .string()\r\n      .min(8, \"password is too weak\")\r\n      .matches(\r\n        /^([a-zA-Z0-9])(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[*.!@$%^&(){}[])[A-Za-z\\d@$!%*#?&]{8,24}$/,\r\n        \"Must Contain minimum 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character except the first character\"\r\n      )\r\n      .required(\"password is required\"),\r\n    // phone number verification using regular-expression\r\n    phone: yup.string().matches(/^[6-9]\\d{9}$/, {\r\n      message: \"Please enter valid 10 digit phone-number.\",\r\n      excludeEmptyString: false,\r\n    }),\r\n    // check if the two passwords are same\r\n    passwordConfirmation: yup\r\n      .string()\r\n      .oneOf([yup.ref(\"password\"), null], \"Passwords must match\"),\r\n  });\r\n\r\n  // Using react hook form for easy form submission and validation, errors are displayed live as the state updates on change of any field\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors, dirtyFields },\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n    mode: \"onChange\",\r\n    defaultValues: {\r\n      fullname: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n      password: \"\",\r\n      passwordConfirmation: \"\",\r\n    },\r\n  });\r\n\r\n  // POST request to server with credentials to register the user\r\n  const registerUser = async (data) => {\r\n    setError(null);\r\n    setSuccess(false);\r\n    axios\r\n      .post(`${process.env.REACT_APP_API_URL}auth/user`, data)\r\n      .then((response) => {\r\n        setSuccess(true);\r\n        reset();\r\n      })\r\n      .catch((error) => {\r\n        setError(error.response.data.message);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"global-container\">\r\n      <div className=\"card login-form\">\r\n        <div className=\"card-body\">\r\n          <h3 className=\"card-title text-center\">Register to Covid Tracker</h3>\r\n          <div className=\"card-text\">\r\n            <form onSubmit={handleSubmit(registerUser)}>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"fullname\">Full Name</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className={`form-control ${\r\n                    dirtyFields.fullname\r\n                      ? errors.fullname\r\n                        ? \"is-invalid\"\r\n                        : \"is-valid\"\r\n                      : \"\"\r\n                  }`}\r\n                  id=\"fullname\"\r\n                  {...register(\"fullname\")}\r\n                />\r\n                {errors.fullname && (\r\n                  <div className=\"alert alert-danger mt-2\">\r\n                    <span>{errors.fullname.message}</span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>Email</label>\r\n                <input\r\n                  className={`form-control ${\r\n                    dirtyFields.email\r\n                      ? errors.email\r\n                        ? \"is-invalid\"\r\n                        : \"is-valid\"\r\n                      : \"\"\r\n                  }`}\r\n                  {...register(\"email\")}\r\n                />\r\n                {errors.email && (\r\n                  <div className=\"alert alert-danger mt-2\">\r\n                    <span>{errors.email.message}</span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"phone\">Phone Number</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className={`form-control ${\r\n                    dirtyFields.phone\r\n                      ? errors.phone\r\n                        ? \"is-invalid\"\r\n                        : \"is-valid\"\r\n                      : \"\"\r\n                  }`}\r\n                  id=\"phone\"\r\n                  {...register(\"phone\")}\r\n                />\r\n                {errors.phone && (\r\n                  <div className=\"alert alert-danger mt-2\">\r\n                    <span>{errors.phone.message}</span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"password\">Password</label>\r\n                <input\r\n                  type=\"password\"\r\n                  className={`form-control ${\r\n                    dirtyFields.password\r\n                      ? errors.password\r\n                        ? \"is-invalid\"\r\n                        : \"is-valid\"\r\n                      : \"\"\r\n                  }`}\r\n                  id=\"password\"\r\n                  {...register(\"password\")}\r\n                />\r\n                {errors.password && (\r\n                  <div className=\"alert alert-danger mt-2\">\r\n                    <span>{errors.password.message}</span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"passwordConfirmation\">Confirm Password</label>\r\n                <input\r\n                  type=\"password\"\r\n                  className={`form-control ${\r\n                    dirtyFields.passwordConfirmation\r\n                      ? errors.passwordConfirmation\r\n                        ? \"is-invalid\"\r\n                        : \"is-valid\"\r\n                      : \"\"\r\n                  }`}\r\n                  id=\"passwordConfirmation\"\r\n                  {...register(\"passwordConfirmation\")}\r\n                />\r\n                {errors.passwordConfirmation && (\r\n                  <div className=\"alert alert-danger mt-2\">\r\n                    <span>{errors.passwordConfirmation.message}</span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              <button type=\"submit\" className=\"btn btn-primary btn-block\">\r\n                <FaSignInAlt /> Sign up\r\n              </button>\r\n\r\n              {error && (\r\n                <div className=\"alert alert-danger mt-2 text-center\">\r\n                  <span>{error}</span>\r\n                </div>\r\n              )}\r\n\r\n              {success && (\r\n                <div className=\"alert alert-success mt-2 text-center\">\r\n                  <span>\r\n                    Your account has been created successfully! Please login to\r\n                    continue.\r\n                  </span>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"sign-up\">\r\n                Already have an account? <Link to=\"/login\">Log in</Link>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Register;\r\n","import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { CgPlayListAdd } from \"react-icons/cg\";\r\nimport { TiDeleteOutline } from \"react-icons/ti\";\r\n\r\n// using react-hook-form library for form submission and validation.\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\n// using yup resolver to validate our form\r\nimport * as yup from \"yup\";\r\n\r\nfunction UpdateForm({ signedIn }) {\r\n  const token = localStorage.getItem(\"jwtToken\");\r\n\r\n  // state that keeps the current number of entries in the form:\r\n  const [numEntries, setnumEntries] = useState(1);\r\n\r\n  // state the keeps the error message, if it happens during form submission.\r\n  const [error, setError] = useState(null);\r\n\r\n  // state whethe the form has been submitted successfullly\r\n  const [success, setSuccess] = useState(false);\r\n\r\n  // This state keeps the options for the dropdown list retrieved from the database from the backend using an API call.\r\n  const [stateData, setStateData] = useState([]);\r\n\r\n  // Our validation schema for form validation, strings in brackets are the error that are displayed if the requirement is not completed\r\n  const schema = yup.object({\r\n    entries: yup.array().of(\r\n      yup.object().shape({\r\n        state_id: yup\r\n          .number(\"Please select a state\")\r\n          .typeError(\"Please select a state\")\r\n          .required(\"Please select a state\"),\r\n        newcases: yup\r\n          .number()\r\n          .positive(\"number must be positive\")\r\n          .typeError(\"you must specify a number\")\r\n          .required(\"Please enter a number\"),\r\n      })\r\n    ),\r\n  });\r\n\r\n  // Using react hook form for easy form submission and validation, errors are displayed live as the state updates on change of any field\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n    mode: \"onChange\",\r\n  });\r\n\r\n  // useEffect hook used to retrieve the list of all states to fill the options in the form\r\n  useEffect(() => {\r\n    // send the token in the request header for authentication.\r\n    axios\r\n      .get(`${process.env.REACT_APP_API_URL}api/states`, {\r\n        headers: { \"x-access-token\": token },\r\n      })\r\n      .then((response) => {\r\n        setStateData(response.data);\r\n      })\r\n      .catch((error) => {\r\n        // if an error occurs, change the error state.\r\n        setError(error?.response?.data?.message);\r\n      });\r\n  }, [token]);\r\n\r\n  // form submission to backend\r\n  const sendData = async (data) => {\r\n    setSuccess(false);\r\n    data.entries = data.entries.slice(0, numEntries);\r\n    axios\r\n      .post(`${process.env.REACT_APP_API_URL}api/data`, data.entries, {\r\n        headers: { \"x-access-token\": token },\r\n      })\r\n      .then((response) => {\r\n        // set success state to true and reset the form\r\n        setSuccess(true);\r\n        setTimeout(() => {\r\n          setSuccess(false);\r\n        }, 5000);\r\n        // reset form\r\n        setnumEntries(1);\r\n        reset();\r\n      })\r\n      .catch((error) => {\r\n        setError(error.response.data.message);\r\n      });\r\n  };\r\n\r\n  // if user is not logged in, redirect them to the login page (home page)\r\n  if (!signedIn) {\r\n    return <Redirect to=\"/\" />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"global-container\">\r\n      <div className=\"card update-form\">\r\n        <div className=\"card-body\">\r\n          <h3 className=\"card-title text-center\">\r\n            <CgPlayListAdd /> Add active COVID-19 cases:\r\n          </h3>\r\n\r\n          <div className=\"card-text\">\r\n            {success && (\r\n              <div className=\"alert alert-success mb-4\" role=\"alert\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"close\"\r\n                  data-dismiss=\"alert\"\r\n                  aria-label=\"Close\"\r\n                >\r\n                  <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n                <strong>Success!</strong> Database has been updated successfully\r\n              </div>\r\n            )}\r\n\r\n            <form onSubmit={handleSubmit(sendData)}>\r\n              {/* dynamically update the form as the number of entries state changes (changed by user using the + - icon) */}\r\n              {[...Array(numEntries).keys()].map((i) => (\r\n                <div key={i} className=\"form-group\">\r\n                  <label>Entry: {i + 1} </label>\r\n                  <select\r\n                    name={`entries.${i}.state_id`}\r\n                    {...register(`entries.${i}.state_id`)}\r\n                    className={`form-control ${\r\n                      errors.entries?.[i]?.state_id?.message ? \"is-invalid\" : \"\"\r\n                    }`}\r\n                  >\r\n                    <option value={\"\"}>Select State...</option>\r\n                    {stateData.map((val, index) => (\r\n                      <option key={index} value={val.state_id}>\r\n                        {val.name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n\r\n                  <label htmlFor=\"cases\">Active Covid Cases:</label>\r\n                  <input\r\n                    type=\"number\"\r\n                    min=\"0\"\r\n                    className={`form-control ${\r\n                      errors.entries?.[i]?.newcases?.message ? \"is-invalid\" : \"\"\r\n                    }`}\r\n                    placeholder=\"Enter active covid cases in this state\"\r\n                    id=\"cases\"\r\n                    name={`entries.${i}.newcases`}\r\n                    {...register(`entries.${i}.newcases`)}\r\n                  />\r\n                  {errors.entries?.[i]?.newcases && (\r\n                    <div className=\"alert alert-danger mt-2\">\r\n                      <span>{errors.entries?.[i]?.newcases?.message}</span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              ))}\r\n\r\n              <div className=\"row justify-content-center m-4\">\r\n                <button\r\n                  className=\"btn btn-danger m-2\"\r\n                  type=\"button\"\r\n                  onClick={() => setnumEntries((n) => n + 1)}\r\n                >\r\n                  <CgPlayListAdd style={{ fontSize: \"1.3rem\" }} /> Add an Entry\r\n                </button>\r\n                {numEntries > 1 && (\r\n                  <button\r\n                    className=\"btn btn-danger m-2\"\r\n                    type=\"button\"\r\n                    onClick={() => setnumEntries((n) => n - 1)}\r\n                  >\r\n                    <TiDeleteOutline style={{ fontSize: \"1.3rem\" }} /> Remove\r\n                    Entry\r\n                  </button>\r\n                )}\r\n              </div>\r\n              <p>\r\n                *Click on add entry to insert multiple entries in the database\r\n                in one go.\r\n              </p>\r\n              <button type=\"submit\" className=\"btn btn-primary btn-block\">\r\n                Submit\r\n              </button>\r\n              {error && (\r\n                <div className=\"alert alert-danger mt-2 text-center\">\r\n                  <span>{error}</span>\r\n                </div>\r\n              )}\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UpdateForm;\r\n","import React from \"react\";\r\nimport { FiLogOut } from \"react-icons/fi\";\r\n\r\n// logout the user by removing the token stored in browser storage and changed the signed in statte to false\r\nfunction Logout({ setSignedIn }) {\r\n  const logout = () => {\r\n    localStorage.removeItem(\"jwtToken\");\r\n    setSignedIn(false);\r\n  };\r\n  return (\r\n    <div>\r\n      <button\r\n        className=\"btn mt-0 btn-danger\"\r\n        onClick={logout}\r\n        style={{ fontSize: \"1.25rem\" }}\r\n      >\r\n        <FiLogOut />\r\n        Logout\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Logout;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport Logout from \"./Logout\";\r\nimport { AiOutlineLogin } from \"react-icons/ai\";\r\nimport { RiVirusFill } from \"react-icons/ri\";\r\nimport { ImDatabase } from \"react-icons/im\";\r\nimport { FaSignInAlt } from \"react-icons/fa\";\r\n\r\n// The navbar functional component. The protected links the disabled if the user is not logged in\r\nfunction Navbar({ signedIn, setSignedIn }) {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n      <a className=\"navbar-brand \" href=\"/\">\r\n        COVID-19 Tracker <RiVirusFill />\r\n      </a>\r\n      <button\r\n        className=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#navbarSupportedContent\"\r\n        aria-controls=\"navbarSupportedContent\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\"\r\n      >\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav mr-auto  text-center\">\r\n          <li className=\"nav-item\">\r\n            <NavLink\r\n              className={`nav-link ${signedIn ? \"disabled\" : null}`}\r\n              exact\r\n              to=\"/\"\r\n              activeClassName=\"active\"\r\n            >\r\n              <AiOutlineLogin /> Login\r\n            </NavLink>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <NavLink\r\n              className={`nav-link ${signedIn ? \"disabled\" : null}`}\r\n              to=\"/register\"\r\n              exact\r\n              activeClassName=\"active\"\r\n            >\r\n              <FaSignInAlt /> Register\r\n            </NavLink>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <NavLink\r\n              className={`nav-link ${signedIn ? null : \"disabled\"}`}\r\n              to=\"/update-form\"\r\n              exact\r\n              activeClassName=\"active\"\r\n            >\r\n              <ImDatabase /> Update Covid-19 data\r\n            </NavLink>\r\n          </li>\r\n        </ul>\r\n\r\n        <span className=\"navbar-text float-right\">\r\n          {signedIn ? (\r\n            <Logout setSignedIn={setSignedIn} />\r\n          ) : (\r\n            <>Not signed in.</>\r\n          )}\r\n        </span>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","// The main component, all other components are imported from the components folder.\n\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport Login from \"./components/login\";\nimport { Switch, Route, BrowserRouter } from \"react-router-dom\";\nimport Register from \"./components/Register\";\nimport UpdateForm from \"./components/UpdateForm\";\nimport Navbar from \"./components/Navbar\";\n\nfunction App(props) {\n  // state that keeps the information whether the user is signed in or not, if the browser storage already contains an authentication token, the user is logged in.\n  const [signedIn, setSignedIn] = useState(\n    localStorage.getItem(\"jwtToken\") !== null\n  );\n\n  return (\n    <div style={{ height: \"100%\" }}>\n      {/* using browserRouter to swich between our pages*/}\n      <BrowserRouter>\n        <Navbar signedIn={signedIn} setSignedIn={setSignedIn} />\n\n        <div className=\"app\">\n          <Switch>\n            {/* route to homepage which is just the login page */}\n            <Route\n              path=\"/\"\n              exact\n              component={() => (\n                <Login signedIn={signedIn} setSignedIn={setSignedIn} />\n              )}\n            />\n\n            {/* route to register new user */}\n            <Route\n              path=\"/register\"\n              exact\n              component={() => <Register signedIn={signedIn} />}\n            />\n\n            {/* route to the form that is used to update the db. This route is protected */}\n            <Route\n              path=\"/update-form\"\n              exact\n              component={() => <UpdateForm signedIn={signedIn} />}\n            />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}